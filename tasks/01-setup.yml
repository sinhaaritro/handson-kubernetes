# tasks/01-setup.yml
# Contains all tasks related to tool installation and cluster management.

version: "3"

tasks:
  install-docker:
    desc: "Installs Docker and adds the current user to the 'docker' group."
    cmds:
      - |
        echo "Installing Docker..."
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        echo "Docker installed successfully."
        docker --version

        echo "Adding current user (${USER}) to the 'docker' group..."
        sudo usermod -aG docker ${USER}
        echo ""
        echo "#########################################################################################"
        echo "# ACTION REQUIRED: Log out and log back in, or run 'newgrp docker' for changes to apply."
        echo "#########################################################################################"
    preconditions:
      - sh: '[ "{{.CONTAINER_ENGINE}}" = "docker" ]'
        msg: "CONTAINER_ENGINE is not set to docker."
      - sh: "! command -v docker"
        msg: "Docker is already installed."

  install-podman:
    desc: "Installs Podman."
    cmds:
      - |
        echo "Installing Podman..."
        sudo apt-get update
        sudo apt-get install -y podman
        echo "Podman installed successfully."
        podman --version
    preconditions:
      - sh: '[ "{{.CONTAINER_ENGINE}}" = "podman" ]'
        msg: "CONTAINER_ENGINE is not set to podman."
      - sh: "! command -v podman"
        msg: "Podman is already installed."

  install-kind:
    desc: "Installs Kind (Kubernetes in Docker)."
    cmds:
      - |
        echo "Installing Kind..."
        curl -Lo ./kind "https://kind.sigs.k8s.io/dl/v0.20.0/kind-$(uname)-amd64"
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
        echo "Kind installed successfully."
        kind --version
    preconditions:
      - sh: "! command -v kind"
        msg: "Kind is already installed."

  install-kubectl:
    desc: "Installs kubectl, the Kubernetes command-line tool."
    cmds:
      - |
        echo "Installing kubectl..."
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        rm kubectl
        echo "kubectl installed successfully."
        kubectl version --client
    preconditions:
      - sh: "! command -v kubectl"
        msg: "kubectl is already installed."

  setup-kube:
    desc: "Runs all necessary installers for the local Kubernetes environment based on the specified CONTAINER_ENGINE."
    deps:
      - install-{{.CONTAINER_ENGINE}}
      - install-kind
      - install-kubectl
    cmds:
      - echo "Kubernetes setup complete with {{.CONTAINER_ENGINE}}, Kind, and kubectl."

  cluster-up:
    desc: "Creates a Kind cluster using the local kind-config.yaml file."
    cmds:
      - kind create cluster --config {{.KIND_CONFIG}}
    preconditions:
      - sh: "[ -f {{.KIND_CONFIG}} ]"
        msg: "The Kind config file '{{.KIND_CONFIG}}' is missing."
      - sh: '!(kind get clusters | grep -q "^kind$")'
        msg: "A Kind cluster already exists. Use 'task cluster-down' first."

  cluster-down:
    desc: "Deletes the local Kind cluster."
    cmds:
      - kind delete cluster
    preconditions:
      - sh: '(kind get clusters | grep -q "^kind$")'
        msg: "No Kind cluster was found to delete."

  install-metrics-server:
    desc: "Installs the Metrics Server to enable resource usage commands (top)."
    cmds:
      - |
        kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
        echo "Waiting for Metrics Server to be ready before patching..."
        kubectl wait --for=condition=ready pod -l k8s-app=metrics-server -n kube-system --timeout=120s
        kubectl patch deployment metrics-server -n kube-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--kubelet-insecure-tls"}]'
        echo "Metrics Server installed. It may take a minute for metrics to become available."
