# # tasks/05-secrets.yml
# # This module contains all tasks for learning about Secrets.

version: "3"

tasks:
  get-secret:
    desc: "Lists all Secret in the current namespace."
    cmds:
      - kubectl get secret

  describe-secret:
    desc: "Shows the data and details of the 'secret-from-literal' Secret."
    cmds:
      - kubectl describe secret secret-from-literal

      # Get the contents of secret?

  # --- Step 1: Create the Secret Resources ---
  # --- Method 1: Create from Literals ---
  create-secret-from-literal:
    desc: "Creates a Secret from literal key-value pairs."
    cmds:
      - kubectl create secret generic secret-from-literal --from-literal=SECRET_LITERAL_VAR1="Secret Value One from Literal" --from-literal=SECRET_LITERAL_VAR2="Secret Value Two from Literal"

  # --- Method 2: Create from a Single File ---
  create-secret-from-single-file:
    desc: "Creates a Secret from the single file './secret-sources/from-file.conf'."
    cmds:
      - kubectl create secret generic secret-from-single-file --from-file=./secret-sources/from-file.conf

  # --- Method 3: Create from an Env File ---
  create-secret-from-env-file:
    desc: "Creates a Secret from the env file './secret-sources/from-env-file.env'."
    cmds:
      - kubectl create secret generic secret-from-env-file --from-env-file=./secret-sources/from-env-file.env

  # --- Method 4: Create from a Directory ---
  create-secret-from-directory:
    desc: "Creates a Secret from all files in './secret-sources/from-directory-files'."
    cmds:
      - kubectl create secret generic secret-from-directory --from-file=./secret-sources/from-directory-files

  # --- Method 5: Create from a Manifest File (Text) ---
  apply-secret-from-manifest:
    desc: "Creates or updates a Secret from the plain text 'secret-from-manifest-text.yaml' file."
    cmds:
      - kubectl apply -f secret-from-manifest-text.yaml

  # --- Method 6: Create from a Manifest File (Base64) ---
  apply-secret-from-manifest-base64:
    desc: "Creates a Secret from the Base64-encoded 'secret-from-manifest-base64.yaml' file."
    cmds:
      - kubectl apply -f secret-from-manifest-base64.yaml

  # --- Method 7: Create a Specialized TLS Secret ---
  create-secret-tls:
    desc: "Creates a specialized 'tls' type Secret from key and certificate files."
    cmds:
      # Note: We use 'kubectl create secret tls', not 'generic'.
      # This command requires the --key and --cert flags.
      - kubectl create secret tls secret-for-tls --key=./secret-sources/tls.key --cert=./secret-sources/tls.crt

  # --- Method 8: Create a Specialized Docker Registry Secret ---
  create-secret-docker-registry:
    desc: "Creates a specialized 'docker-registry' type Secret for pulling private images."
    cmds:
      # Note: We use 'kubectl create secret docker-registry', not 'generic'.
      # We provide dummy credentials because we don't have a real private registry.
      # The goal is to see Kubernetes *attempt* to use this secret.
      - kubectl create secret docker-registry secret-for-docker-registry --docker-server=my-private-registry.io --docker-username=my-user --docker-password=my-secret-password --docker-email=user@example.com

  # --- Step 2: Create the Pod that consumes them ---

  apply-pod:
    desc: "Applies the alpine-sec-pod.yaml manifest to create the test pod."
    cmds:
      - kubectl apply -f alpine-sec-pod.yaml

  # --- Step 3: Verify the Secret were loaded ---

  check-env-vars:
    desc: "Verifies that the environment variables from the Secret were injected."
    cmds:
      - |
        echo "--- Checking for environment variables in alpine-sec-pod ---"
        kubectl exec alpine-sec-pod -- printenv | grep -E 'SECRET_LITERAL_|SECRET_ENVFILE_'

  check-mounted-file:
    desc: "Verifies the mounted file from the 'cm-from-single-file' Secret."
    cmds:
      - |
        echo "--- Checking for mounted file in /secrets/from-single-file/ ---"
        # The key in the Secret is the filename, so that becomes the filename inside the mount path.
        kubectl exec alpine-sec-pod -- cat /secrets/from-single-file/from-file.conf

  check-mounted-directory:
    desc: "Verifies the mounted files from the 'cm-from-directory' Secret."
    cmds:
      - |
        echo "--- Checking for mounted directory in /secrets/from-directory/ ---"
        echo "Listing files:"
        kubectl exec alpine-sec-pod -- ls /secrets/from-directory/
        echo "---"
        echo "Content of DIR_VAR1:"
        kubectl exec alpine-sec-pod -- cat /secrets/from-directory/SECRET_DIR_VAR1

  check-mounted-manifest:
    desc: "Verifies the mounted files from the 'secret-from-manifest-text' or 'secret-from-manifest-base64' Secret. This has both types, look at which one you want."
    cmds:
      - |
        echo "--- Checking for mounted directory in /secrets/from-manifest-text/ ---"
        echo "Listing files:"
        kubectl exec alpine-sec-pod -- ls /secrets/from-manifest-text/
        echo "---"
        echo "Content of SECRET_STRINGDATA_VAR:"
        kubectl exec alpine-sec-pod -- cat /secrets/from-manifest-text/SECRET_STRINGDATA_VAR
        echo ""
        echo "--- Checking for mounted directory in /secrets/from-manifest-base64/ ---"
        echo "Listing files:"
        kubectl exec alpine-sec-pod -- ls /secrets/from-manifest-base64/
        echo "---"
        echo "Content of SECRET_BASE64_VAR:"
        kubectl exec alpine-sec-pod -- cat /secrets/from-manifest-base64/SECRET_BASE64_VAR

  check-mounted-tls:
    desc: "Verifies the mounted files from the specialized 'tls' Secret."
    cmds:
      - |
        echo "--- Checking for mounted files in /secrets/from-tls/ ---"
        # The 'create secret tls' command automatically creates keys named 'tls.crt' and 'tls.key'.
        # These keys become the filenames in the mounted volume.
        kubectl exec alpine-sec-pod -- ls /secrets/from-tls

  check-image-pull-status:
    desc: "Checks the Pod's events to verify it is trying to use the imagePullSecret."
    cmds:
      - |
        echo "--- The Pod will NOT be 'Running'. This is expected! ---"
        echo "The proof is in the 'Events' section below. Look for a 'Failed' event"
        echo "with a message about pulling 'my-private-registry.io/alpine:latest'."
        echo "This proves the Kubelet is using your secret to try and authenticate."
        echo "------------------------------------------------------------------"
        kubectl describe pod alpine-sec-pod

  decode-secret-key:
    desc: "Decodes a key from a Secret. Override defaults with 'task decode-secret-key SECRET_NAME=... KEY_NAME=...'"
    vars:
      SECRET_NAME: secret-from-literal
      KEY_NAME: SECRET_LITERAL_VAR1
    cmds:
      - |
        # This script now uses the local variables {{.SECRET_NAME}} and {{.KEY_NAME}}.
        # These will use the default values above unless they are overridden on the command line.
        echo "--> Attempting to decode key '{{.KEY_NAME}}' from Secret '{{.SECRET_NAME}}'..."

        ENCODED_VALUE=$(kubectl get secret {{.SECRET_NAME}} -o jsonpath='{.data.{{.KEY_NAME}}}')

        # Check if the command was successful and we got a value.
        if [ -z "$ENCODED_VALUE" ]; then
          echo "Error: Could not find key '{{.KEY_NAME}}' in Secret '{{.SECRET_NAME}}'."
          echo "Please check that the secret and key exist."
          exit 1
        fi

        echo "Encoded value: $ENCODED_VALUE"
        echo "Decoded value:"
        echo $ENCODED_VALUE | base64 --decode
        # Add a newline for cleaner output
        echo ""

  # --- Step 4: Cleanup ---

  cleanup:
    desc: "Deletes the Pod and Secret for this lesson."
    cmds:
      - kubectl delete pod alpine-sec-pod --ignore-not-found=true
      - kubectl delete secret secret-from-literal --ignore-not-found=true
      - kubectl delete secret secret-from-single-file --ignore-not-found=true
      - kubectl delete secret secret-from-env-file --ignore-not-found=true
      - kubectl delete secret secret-from-env-directory --ignore-not-found=true
      - kubectl delete secret secret-from-manifest-text --ignore-not-found=true
      - kubectl delete secret secret-from-manifest-base64 --ignore-not-found=true
      - kubectl delete secret secret-for-tls --ignore-not-found=true
      - kubectl delete secret secret-for-docker-registry --ignore-not-found=true

  delete-all-cm:
    desc: "Deletes all Secret created."
    cmds:
      - kubectl delete pod alpine-sec-pod --ignore-not-found=true
      - kubectl delete secret secret-from-literal secret-from-single-file secret-from-env-file secret-from-directory secret-from-manifest-text secret-from-manifest-base64 secret-for-tls secret-for-docker-registry --ignore-not-found=true
